{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "84d0611f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e2855940",
   "metadata": {},
   "outputs": [],
   "source": [
    "# =============================================================================",
    "",
    "# =============================================================================",
    "# Revisa la salida del print de abajo y pon el nombre EXACTO de la columna aquí",
    "TARGET_COL = 'market_value_in_eur'\n",
    "# =============================================================================",
    "\n",
    "# %%",
    "# --- Carga de data ---",
    "DATA_DIR = '../data/raw/davidcariboo_dataset/'\n",
    "\n",
    "try:\n",
    "    players_df = pd.read_csv(f'{DATA_DIR}players.csv')\n",
    "    valuations_df = pd.read_csv(f'{DATA_DIR}player_valuations.csv')\n",
    "    appearances_df = pd.read_csv(f'{DATA_DIR}appearances.csv')\n",
    "except FileNotFoundError as e:\n",
    "    print(f\"Error al cargar el archivo: {e}\")\n",
    "    exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f344156",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columnas encontradas en player_valuations.csv: ['player_id', 'date', 'market_value_in_eur', 'current_club_id', 'player_club_domestic_competition_id']\n"
     ]
    }
   ],
   "source": [
    "# --- DIAGNÓSTICO ---",
    "print(\"Columnas encontradas en player_valuations.csv:\", valuations_df.columns.tolist())\n",
    "# Asegúrate de que el nombre en TARGET_COL coincide con uno de esta lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "279c8ffe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Paso 1: Procesando Valoraciones ---\n",
      "Se encontraron valoraciones para 31078 jugadores.\n",
      "Columnas en latest_valuations_df: ['player_id', 'date', 'market_value_in_eur', 'current_club_id', 'player_club_domestic_competition_id']\n"
     ]
    }
   ],
   "source": [
    "# %%",
    "# --- Paso 1: Obtener el market value más reciente para cada player ---",
    "print(\"\\n--- Paso 1: Procesando Valoraciones ---\")\n",
    "valuations_df['date'] = pd.to_datetime(valuations_df['date'])\n",
    "valuations_df = valuations_df.sort_values(by=['player_id', 'date'], ascending=[True, False])\n",
    "latest_valuations_df = valuations_df.drop_duplicates(subset='player_id', keep='first')\n",
    "print(f\"Se encontraron valoraciones para {latest_valuations_df['player_id'].nunique()} jugadores.\")\n",
    "print(f\"Columnas en latest_valuations_df: {latest_valuations_df.columns.tolist()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "838cb123",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Paso 2: Creando Tabla Maestra ---\n",
      "Detectadas columnas duplicadas: 'market_value_in_eur_x' y 'market_value_in_eur_y'. Corrigiendo...\n",
      "Corrección aplicada. La columna objetivo ahora es: market_value_in_eur\n",
      "Dimensiones de la tabla maestra: (31078, 24)\n",
      "Columnas en master_df (después de corregir): ['player_id', 'first_name', 'last_name', 'name', 'last_season', 'current_club_id', 'player_code', 'country_of_birth', 'city_of_birth', 'country_of_citizenship', 'date_of_birth', 'sub_position', 'position', 'foot', 'height_in_cm', 'contract_expiration_date', 'agent_name', 'image_url', 'url', 'current_club_domestic_competition_id', 'current_club_name', 'highest_market_value_in_eur', 'date', 'market_value_in_eur']\n"
     ]
    }
   ],
   "source": [
    "# %%",
    "# --- Paso 2: Crear nuestra tabla maestra y CORREGIR NOMBRES DUPLICADOS ---",
    "print(\"\\n--- Paso 2: Creando Tabla Maestra ---\")\n",
    "valuation_cols_to_merge = ['player_id', 'date', TARGET_COL]\n",
    "master_df = pd.merge(players_df, latest_valuations_df[valuation_cols_to_merge], on='player_id', how='inner')\n",
    "\n",
    "# --- INICIO DE LA CORRECCIÓN ---",
    "# Comprobar si pandas ha creado columnas duplicadas (_x, _y)",
    "col_x = f'{TARGET_COL}_x'\n",
    "col_y = f'{TARGET_COL}_y'\n",
    "\n",
    "if col_y in master_df.columns:\n",
    "    print(f\"Detectadas columnas duplicadas: '{col_x}' y '{col_y}'. Corrigiendo...\")\n",
    "",
    "    master_df[TARGET_COL] = master_df[col_y]\n",
    "# Eliminamos las columnas _x y _y que ya no necesitamos",
    "    master_df = master_df.drop(columns=[col_x, col_y])\n",
    "    print(\"Corrección aplicada. La columna objetivo ahora es:\", TARGET_COL)\n",
    "# --- FIN DE LA CORRECCIÓN ---",
    "\n",
    "print(f\"Dimensiones de la tabla maestra: {master_df.shape}\")\n",
    "print(f\"Columnas en master_df (después de corregir): {master_df.columns.tolist()}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "88e983f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Paso 3: Agregando Estadísticas de Rendimiento ---\n",
      "Se encontraron estadísticas para 7499 jugadores en la temporada.\n"
     ]
    }
   ],
   "source": [
    "# %%",
    "# --- Paso 3: Agregar las estadísticas de rendimiento de la última temporada ---",
    "print(\"\\n--- Paso 3: Agregando Estadísticas de Rendimiento ---\")\n",
    "appearances_df['date'] = pd.to_datetime(appearances_df['date'])\n",
    "season_start_date = '2022-08-01'\n",
    "season_end_date = '2023-07-31'\n",
    "season_apps = appearances_df[(appearances_df['date'] >= season_start_date) & (appearances_df['date'] <= season_end_date)]\n",
    "\n",
    "player_stats = season_apps.groupby('player_id').agg(\n",
    "    goals=('goals', 'sum'),\n",
    "    assists=('assists', 'sum'),\n",
    "    minutes_played=('minutes_played', 'sum'),\n",
    "    games_played=('game_id', 'count')\n",
    ").reset_index()\n",
    "print(f\"Se encontraron estadísticas para {player_stats['player_id'].nunique()} jugadores en la temporada.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "812c1ded",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Paso 4: Creando Dataset Final ---\n",
      "Dimensiones del dataset final: (7443, 28)\n",
      "Columnas en final_df (antes de filtrar): ['player_id', 'first_name', 'last_name', 'name', 'last_season', 'current_club_id', 'player_code', 'country_of_birth', 'city_of_birth', 'country_of_citizenship', 'date_of_birth', 'sub_position', 'position', 'foot', 'height_in_cm', 'contract_expiration_date', 'agent_name', 'image_url', 'url', 'current_club_domestic_competition_id', 'current_club_name', 'highest_market_value_in_eur', 'date', 'market_value_in_eur', 'goals', 'assists', 'minutes_played', 'games_played']\n"
     ]
    }
   ],
   "source": [
    "# %%",
    "# TODO: --- Paso 4: Unir todo para crear el dataset final de modelado ---",
    "print(\"\\n--- Paso 4: Creando Dataset Final ---\")\n",
    "final_df = pd.merge(master_df, player_stats, on='player_id', how='inner')\n",
    "print(f\"Dimensiones del dataset final: {final_df.shape}\")\n",
    "print(f\"Columnas en final_df (antes de filtrar): {final_df.columns.tolist()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2b709372",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Paso 5: Entrenando Modelo Baseline ---\n",
      "Dimensiones del DataFrame listo para modelar: (6280, 28)\n",
      "\n",
      "--- Resultados del Modelo Baseline (Ridge) Actualizado ---\n",
      "MAE en Euros: €3,982,015\n",
      "Valor Mediano en el set de prueba: €1,200,000\n",
      "El error promedio es de ~€3.98M en un set con valor mediano de ~€1.20M.\n"
     ]
    }
   ],
   "source": [
    "# %%",
    "# --- Paso 5: Actualizar nuestro model Baseline con el Dataset Correcto ---",
    "print(\"\\n--- Paso 5: Entrenando Modelo Baseline ---\")\n",
    "\n",
    "# 1. Definir columnas necesarias y filtrar nulos",
    "required_cols = [TARGET_COL, 'goals', 'assists', 'minutes_played', 'date_of_birth']\n",
    "df_filtered = final_df.dropna(subset=required_cols)\n",
    "\n",
    "# 2. Aplicar filtros de negocio",
    "df_filtered = df_filtered[df_filtered[TARGET_COL] > 0]\n",
    "df_filtered = df_filtered[df_filtered['minutes_played'] > 90]\n",
    "\n",
    "# 3. Crear una copia explícita para evitar errores",
    "df_model = df_filtered.copy()\n",
    "\n",
    "if df_model.empty:\n",
    "    print(\"¡ERROR CRÍTICO! El DataFrame está vacío después de los filtros.\")\n",
    "else:\n",
    "    print(f\"Dimensiones del DataFrame listo para modelar: {df_model.shape}\")\n",
    "\n",
    "# 4. Feature Engineering: Calcular la age",
    "    df_model['date_of_birth'] = pd.to_datetime(df_model['date_of_birth'])\n",
    "    df_model['age'] = (df_model['date'] - df_model['date_of_birth']).dt.days / 365.25\n",
    "\n",
    "# 5. Definir features y target",
    "    features = ['age', 'goals', 'assists', 'minutes_played', 'games_played']\n",
    "    X = df_model[features]\n",
    "    y_log = np.log1p(df_model[TARGET_COL])\n",
    "\n",
    "# 6. Entrenar y Evaluar",
    "    X_train, X_test, y_train_log, y_test_log = train_test_split(X, y_log, test_size=0.2, random_state=42)\n",
    "    ridge_model = Ridge(alpha=1.0)\n",
    "    ridge_model.fit(X_train, y_train_log)\n",
    "\n",
    "    preds_log = ridge_model.predict(X_test)\n",
    "    y_test_eur = np.expm1(y_test_log)\n",
    "    preds_eur = np.expm1(preds_log)\n",
    "\n",
    "    mae_eur = mean_absolute_error(y_test_eur, preds_eur)\n",
    "    median_value = y_test_eur.median()\n",
    "\n",
    "    print(f\"\\n--- Resultados del Modelo Baseline (Ridge) Actualizado ---\")\n",
    "    print(f\"MAE en Euros: €{mae_eur:,.0f}\")\n",
    "    print(f\"Valor Mediano en el set de prueba: €{median_value:,.0f}\")\n",
    "    print(f\"El error promedio es de ~€{mae_eur/1e6:.2f}M en un set con valor mediano de ~€{median_value/1e6:.2f}M.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}